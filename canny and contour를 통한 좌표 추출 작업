import cv2
import sys
import numpy as np

# 0cv2.IMREAD_COLOR
image = cv2.imread("Pudcoco-backless.jpg", cv2.IMREAD_REDUCED_COLOR_2)
cv2.imshow("result", image)
cv2.waitKey(0)

blurred = cv2.GaussianBlur(image, (5, 5), 0)      #필터링, 노이즈 제거

gray = cv2.cvtColor(blurred, cv2.COLOR_BGR2GRAY)
cv2.imshow("result2", gray)
cv2.waitKey(0)

edge = cv2.Canny(gray, 50, 150)
cv2.imshow("result3", edge )
cv2.waitKey(0)
ret, binary = cv2.threshold(edge, 127, 255, cv2.THRESH_BINARY_INV)

edge = binary
f = open("output1.txt", 'w')


# 1
edge = cv2.bitwise_not(edge)
cv2.imshow("result3", edge)
# roi = edge[20:380,20:380]
# cv2.imwrite("Pudco.png",roi)
# cv2.waitKey(0)

# contoura[]
# contours, hierachy = cv2.findContours(edge.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
# edge = cv2.imread("Pudco.png",cv2.IMREAD_UNCHANGED)
contours, hierachy = cv2.findContours(edge.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
print(contours)
print(len(contours))
print(hierachy)
# print(contours[0][1121])
print(sys.getsizeof(contours))
edges = image.copy()
# for i in range(len(contours)-1):
#     cv2.drawContours(edges, [contours[i+1]], 0, (0, 0, 255), 1)
#     cv2.putText(edges, str(i+1), tuple(contours[i+1][0][0]), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 255, 255), 1)
#     print(i+1, hierachy[0][i+1])
#     # print(contours[i+1])
#     f.writelines(str(contours[i+1])+'\n')
#     cv2.imshow("src", edges)
#     cv2.waitKey(0)

for i in range(len(contours)):
   cv2.drawContours(edges, [contours[i]], 0, (0, 0, 255), 1)
   cv2.putText(edges, str(i), tuple(contours[i][0][0]), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 255, 255), 1)
   # print(i, hierachy[0][i])
   # print(contours[i+1])
   f.writelines(str(contours[i]) + '\n')
   # cv2.imshow("src", edges)
   # cv2.waitKey(0)
# contoura = cv2.findContours(edge.copy(), cv2.RETR_EXTERNAL , cv2.CHAIN_APPROX_NONE)q

# cv2.imshow("src", edges)
# cv2.waitKey(0)
cnt = contours
# cv2.drawContours(edge, contours[0], -1, (0, 255, 0), 1)
# edd=cv2.drawContours(image.copy(), [cnt], 0, (0, 255, 0), 3)
# cv2.imshow("result4", edd )
# cv2.waitKey(0)
helo = max(cnt[:,:,0])
print(helo)
leftmost = tuple(cnt[cnt[:, :, 0].argmin()][0])
rightmost = tuple(cnt[cnt[:, :, 0].argmax()][0])
topmost = tuple(cnt[cnt[:, :, 1].argmin()][0])
bottommost = tuple(cnt[cnt[:, :, 1].argmax()][0])
# left = (cnt[cnt[:,:,0].argmin()])

# right = (cnt[cnt[:,:,0].argmax()])
# top = (cnt[cnt[:,:,1].argmin()])

# bottom = (cnt[cnt[:,:,1].argmax()])
# print(left)

print(bottommost[1])

print(topmost[1])
# roi = image[bottom[1]:top[1],left[0]:right[0]]
roi = image[topmost[1]:bottommost[1],leftmost[0]:rightmost[0]]

cv2.imshow('roi',roi)
cv2.waitKey(0)
# ret, binary = cv2.threshold(edge, 127, 255, cv2.THRESH_BINARY_INV)
# edge = binary
# cv2.imshow("result3", edge )
# cv2.waitKey(0)



# 2  labeling 결과를 리턴값으로 받음
# nlabels, labels, stats, centroids = cv2.connectedComponentsWithStats(edge)
#
#
# for i in range(nlabels):
#
#    #배경과 에지는 일 안함
#    if i < 2:
#       continue
#
#
#    #컨투어별로 넓이,중심좌표,영역박스좌표 가져오기
#    area = stats[i, cv2.CC_STAT_AREA]
#    center_x = int(centroids[i, 0])
#    center_y = int(centroids[i, 1])
#    left = stats[i, cv2.CC_STAT_LEFT]
#    top = stats[i, cv2.CC_STAT_TOP]
#    width = stats[i, cv2.CC_STAT_WIDTH]
#    height = stats[i, cv2.CC_STAT_HEIGHT]
#
#
#    if area > 50:
#       cv2.rectangle(image, (left, top), (left + width, top + height),
#             (0, 0, 255), 1)
#       cv2.circle(image, (center_x, center_y), 5, (255, 0, 0), 1)
#       cv2.putText(image, str(i), (left + 20, top + 20),
#             cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2);
#
#
# cv2.imshow("result5", image)
# cv2.waitKey(0)
