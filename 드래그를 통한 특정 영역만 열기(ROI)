import cv2
import argparse
import numpy as np
from matplotlib import pyplot as plt

point_list = [] # 좌표 저장할 리스트
count = 0 # 현재 좌표를 저장한 갯수
cropping = False
num = 0 # file 저장시 지정할 넘버
point = 0 # 4개 씩 나눈다고 가정할시 첫번째 인자
point2 = 2 # 4개 씩 나눈다고 가정할시 다음 번 좌표집합의 첫번째 인자


def click_and_crop(event, x, y, flags, param):
    # refPt와 cropping 변수를 global로 만듭니다.
    global point_list, cropping, count

    # 왼쪽 마우스가 클릭되면 (x, y) 좌표 기록을 시작하고
    # cropping = True로 만들어 줍니다.
    if event == cv2.EVENT_LBUTTONDOWN:
        # refPt = [(x, y)]
        point_list.append((x, y))
        cropping = True

    # 왼쪽 마우스 버튼이 놓여지면 (x, y) 좌표 기록을 하고 cropping 작업을 끝냅니다.
    # 이 때 crop한 영역을 보여줍니다.
    elif event == cv2.EVENT_LBUTTONUP:
        point_list.append((x, y))
        cropping = False

        print(point_list)
        # ROI 사각형을 이미지에 그립니다.
        cv2.rectangle(image, point_list[count], point_list[count+1], (0, 255, 255), 2)
        cv2.imshow("image", image)
        count = count + 2


# 원본 이미지
# image = cv2.imread('Pudcoco-backless.jpg',cv2.IMREAD_REDUCED_COLOR_2)
image = cv2.imread('stripe_out.png', cv2.IMREAD_UNCHANGED)

# 원본 이미지를 clone 하여 복사해 둡니다.
clone = image.copy()


# 새 윈도우 창을 만들고 그 윈도우 창에 click_and_crop 함수를 세팅해 줍니다. = mouse_callback
cv2.namedWindow("image")
cv2.setMouseCallback("image", click_and_crop)

while True:
    # 이미지를 출력하고 key 입력을 기다립니다.
    cv2.imshow("image", image)
    key = cv2.waitKey(1) & 0xFF

    # 만약 r이 입력되면, crop 할 영열을 리셋합니다.
    if key == ord("r"):
        image = clone.copy()
        point_list.clear()
        count = 0
        point = 0
        point2 = 2
    # 만약 c가 입력되고 ROI 박스가 정확하게 입력되었다면
    # 박스의 좌표를 출력하고 crop한 영역을 출력합니다.
    elif key == ord("c"):
        if len(point_list) >= 2:
            while True:
                if count >= point2:
                    roi = clone[min(point_list[point][1], point_list[point + 1][1]):
                                max(point_list[point][1], point_list[point + 1][1]),
                          min(point_list[point][0], point_list[point + 1][0]):
                          max(point_list[point][0], point_list[point + 1][0])]

                    print(point)
                    print(point_list)
                    print(num)
                    print(point2)
                    print(count)
                    point = point + 2
                    cv2.imshow("ROI", roi)
                    cv2.waitKey(0)

                    cv2.imwrite("file%d.png " % num, roi)
                    num = num+1

                    # src = cv2.imread('file%d.png' % num, 1)
                    # tmp = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
                    # _, alpha = cv2.threshold(tmp, 0, 255, cv2.THRESH_BINARY)
                    # b, g, r = cv2.split(src)
                    # rgba = [b, g, r, alpha]
                    # dst = cv2.merge(rgba, 4)
                    # cv2.imwrite("test%d.png" % num, dst)

                    # if (key2 == ord('s')):
                    #     cv2.imwrite('file..jpg',roi)
                    #     print(num)
                    if point2+2 > count: # 혹시나 하나만 저장(에러)되었을 때를 위해 if문으로 관리( 원래는 반복문만 돌려줘도 됨)
                        point = 0
                        point2 = 2
                        num = 0
                        cv2.destroyWindow("ROI")
                        break # 여기서 종료
                    else: # 아닌 경우( 카운트가 2의 배수면서 포인트 2+2보단 크거나 같음)
                        point2 = point2 + 2

                else:
                    break
            point = 0
            point2 = 2
            # 만약 q가 입력되면 작업을 끝냅니다.
    elif key == ord("q"):
        break

# 모든 window를 종료합니다.
cv2.destroyAllWindows()
